{"version":3,"file":"module.js","mappings":"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","sources":["webpack://vonage-status-panel/../node_modules/react-card-flip/lib/ReactCardFlip.js","webpack://vonage-status-panel/external amd \"@emotion/css\"","webpack://vonage-status-panel/external amd \"@grafana/data\"","webpack://vonage-status-panel/external amd \"@grafana/runtime\"","webpack://vonage-status-panel/external amd \"@grafana/ui\"","webpack://vonage-status-panel/external amd \"lodash\"","webpack://vonage-status-panel/external amd \"react\"","webpack://vonage-status-panel/webpack/bootstrap","webpack://vonage-status-panel/webpack/runtime/compat get default export","webpack://vonage-status-panel/webpack/runtime/define property getters","webpack://vonage-status-panel/webpack/runtime/hasOwnProperty shorthand","webpack://vonage-status-panel/webpack/runtime/make namespace object","webpack://vonage-status-panel/./hooks/useEventListener.ts","webpack://vonage-status-panel/./hooks/useInterval.ts","webpack://vonage-status-panel/./components/Marquee.tsx","webpack://vonage-status-panel/./components/MaybeAnchor.tsx","webpack://vonage-status-panel/./components/StatusColorOptionsEditor.tsx","webpack://vonage-status-panel/./components/StatusThresholdOptionsEditor.tsx","webpack://vonage-status-panel/./module.ts","webpack://vonage-status-panel/./components/StatusPanel.tsx","webpack://vonage-status-panel/./lib/buildStatusMetricProps.ts","webpack://vonage-status-panel/./hooks/useHover.ts","webpack://vonage-status-panel/./lib/statusMigrationHandler.ts","webpack://vonage-status-panel/./lib/statusPanelOptionsBuilder.ts","webpack://vonage-status-panel/./lib/statusFieldOptionsBuilder.ts"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar react_1 = require(\"react\");\nvar ReactCardFlip = function (props) {\n    var _a = __assign({ cardStyles: {\n            back: {},\n            front: {},\n        }, cardZIndex: 'auto', containerStyle: {}, flipDirection: 'horizontal', flipSpeedBackToFront: 0.6, flipSpeedFrontToBack: 0.6, infinite: false, isFlipped: false }, props), _b = _a.cardStyles, back = _b.back, front = _b.front, cardZIndex = _a.cardZIndex, containerStyle = _a.containerStyle, containerClassName = _a.containerClassName, flipDirection = _a.flipDirection, flipSpeedFrontToBack = _a.flipSpeedFrontToBack, flipSpeedBackToFront = _a.flipSpeedBackToFront, infinite = _a.infinite, isFlipped = _a.isFlipped;\n    var _c = (0, react_1.useState)(isFlipped), isFlippedState = _c[0], setFlipped = _c[1];\n    var _d = (0, react_1.useState)(0), rotation = _d[0], setRotation = _d[1];\n    (0, react_1.useEffect)(function () {\n        if (isFlipped !== isFlippedState) {\n            setFlipped(isFlipped);\n            setRotation(function (c) { return c + 180; });\n        }\n    }, [isFlipped]);\n    var getContainerClassName = (0, react_1.useMemo)(function () {\n        var className = 'react-card-flip';\n        if (containerClassName) {\n            className += \" \".concat(containerClassName);\n        }\n        return className;\n    }, [containerClassName]);\n    var getComponent = function (key) {\n        if (props.children.length !== 2) {\n            throw new Error('Component ReactCardFlip requires 2 children to function');\n        }\n        return props.children[key];\n    };\n    var frontRotateY = \"rotateY(\".concat(infinite ? rotation : isFlipped ? 180 : 0, \"deg)\");\n    var backRotateY = \"rotateY(\".concat(infinite ? rotation + 180 : isFlipped ? 0 : -180, \"deg)\");\n    var frontRotateX = \"rotateX(\".concat(infinite ? rotation : isFlipped ? 180 : 0, \"deg)\");\n    var backRotateX = \"rotateX(\".concat(infinite ? rotation + 180 : isFlipped ? 0 : -180, \"deg)\");\n    var styles = {\n        back: __assign({ WebkitBackfaceVisibility: 'hidden', backfaceVisibility: 'hidden', height: '100%', left: '0', position: isFlipped ? 'relative' : 'absolute', top: '0', transform: flipDirection === 'horizontal' ? backRotateY : backRotateX, transformStyle: 'preserve-3d', transition: \"\".concat(flipSpeedFrontToBack, \"s\"), width: '100%' }, back),\n        container: {\n            perspective: '1000px',\n            zIndex: \"\".concat(cardZIndex),\n        },\n        flipper: {\n            height: '100%',\n            position: 'relative',\n            width: '100%',\n        },\n        front: __assign({ WebkitBackfaceVisibility: 'hidden', backfaceVisibility: 'hidden', height: '100%', left: '0', position: isFlipped ? 'absolute' : 'relative', top: '0', transform: flipDirection === 'horizontal' ? frontRotateY : frontRotateX, transformStyle: 'preserve-3d', transition: \"\".concat(flipSpeedBackToFront, \"s\"), width: '100%', zIndex: '2' }, front),\n    };\n    return (React.createElement(\"div\", { className: getContainerClassName, style: __assign(__assign({}, styles.container), containerStyle) },\n        React.createElement(\"div\", { className: \"react-card-flipper\", style: styles.flipper },\n            React.createElement(\"div\", { className: \"react-card-front\", style: styles.front }, getComponent(0)),\n            React.createElement(\"div\", { className: \"react-card-back\", style: styles.back }, getComponent(1)))));\n};\nexports.default = ReactCardFlip;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-redeclare */\nimport { RefObject, useEffect, useLayoutEffect, useRef } from 'react';\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: undefined,\n  options?: boolean | AddEventListenerOptions\n): void;\n\n// Element Event based useEventListener interface\nfunction useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = HTMLDivElement>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n  options?: boolean | AddEventListenerOptions\n): void;\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n  eventName: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  element: RefObject<Document>,\n  options?: boolean | AddEventListenerOptions\n): void;\n\nfunction useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void\n>(\n  eventName: KW | KH,\n  handler: (event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(handler);\n\n  useLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window;\n    if (!(targetElement && (targetElement as any).addEventListener)) {\n      return;\n    }\n\n    // Create event listener that calls handler function stored in ref\n    const eventListener: typeof handler = event => savedHandler.current(event);\n\n    (targetElement as any).addEventListener(eventName, eventListener, options);\n\n    // Remove event listener on cleanup\n    return () => {\n      (targetElement as any).removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element, options]);\n}\n\nexport default useEventListener;\n","import { useEffect, useLayoutEffect, useRef } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React from 'react';\nimport { useInterval } from 'hooks';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  autoScroll?: boolean;\n  hover?: boolean;\n}\n\nexport const ReactMarquee: React.FC<Props> = ({ autoScroll, hover, ...props }) => {\n  const div = React.useRef<HTMLDivElement>(null);\n\n  const fps = 30;\n  const [y, setY] = React.useState(0);\n  const [dy, setDy] = React.useState(1);\n\n  useInterval(() => {\n    if (div.current) {\n      if (hover) {\n        setY(div.current.parentElement!.scrollTop | 0);\n      } else if (autoScroll) {\n        if (0 <= y && y <= div.current.parentElement!.scrollHeight - div.current.parentElement!.offsetHeight + 1) {\n          div.current.parentElement!.scrollTo(0, y);\n          setY(y + dy);\n        } else {\n          setY(y - dy);\n          setDy(-dy);\n        }\n      }\n    }\n  }, 1000 / fps);\n\n  return <div ref={div} {...props}></div>;\n};\n","import React from 'react';\n\nexport const MaybeAnchor: React.FC<React.AnchorHTMLAttributes<HTMLAnchorElement>> = props =>\n  props.href ? <a {...props}></a> : <>{props.children}</>;\n","import { PanelOptionsEditorProps } from '@grafana/data';\nimport { ColorPicker, HorizontalGroup, Label, useTheme2 } from '@grafana/ui';\nimport { StatusPanelOptions } from 'lib/statusPanelOptionsBuilder';\n\nimport React from 'react';\n\nexport const StatusColorOptionsEditor: React.FC<PanelOptionsEditorProps<StatusPanelOptions['colors']>> = ({value, onChange}) => {\n  // get grafana color picker and theme\n  // const colorPicker = standardEditorsRegistry.get('color').editor as any;\n  const theme = useTheme2();\n\n  // helper function to build the handler for each color\n  // const buildHandler = (key: keyof StatusPanelOptions['colors']) => (color: ColorDefinition) =>\n  //   onChange({ ...value, [key]: getColorForTheme(color, theme as any) });    \n\n  \n\n  const buildHandler = (key: keyof StatusPanelOptions['colors']) => (color: string) => {\n    onChange({\n      ...value,\n      [key]: color,\n    });\n  };\n\n  return (\n    <HorizontalGroup spacing=\"lg\">\n      <div>\n        <Label>Critical</Label>\n        <ColorPicker color={value?.crit || theme.visualization.getColorByName(\"red\")} onChange={buildHandler('crit')} />\n        {/* {colorPicker({ value: value.crit, onChange: buildHandler('crit') })} */}\n      </div>\n      <div>\n        <Label>Warning</Label>\n        {/* {colorPicker({ value: value.warn, onChange: buildHandler('warn') })} */}\n        <ColorPicker color={value?.warn || theme.visualization.getColorByName(\"orange\")} onChange={buildHandler('warn')} />\n      </div>\n      <div>\n        <Label>OK</Label>\n        {/* {colorPicker({ value: value.ok, onChange: buildHandler('ok') })} */}\n        <ColorPicker color={value?.ok || theme.visualization.getColorByName(\"green\")} onChange={buildHandler('ok')} />\n      </div>\n      <div>\n        <Label>Disabled</Label>\n        <ColorPicker color={value?.disable || theme.visualization.getColorByName(\"gray\")} onChange={buildHandler('disable')} />\n        {/* {colorPicker({ value: value.disable, onChange: buildHandler('disable') })} */}\n      </div>\n    </HorizontalGroup>\n  );\n};\n","import { FieldOverrideEditorProps, SelectableValue } from '@grafana/data';\nimport { Input, Label, Select } from '@grafana/ui';\nimport React from 'react';\n\nexport interface StatusThresholdOptions {\n  valueHandler: 'Number Threshold' | 'String Threshold' | 'Date Threshold' | 'Disable Criteria' | 'Text Only';\n  warn: string;\n  crit: string;\n}\n\nconst valueHandlerOptions: Array<SelectableValue<StatusThresholdOptions['valueHandler']>> = [\n  {\n    label: 'Number Threshold',\n    value: 'Number Threshold',\n    description:\n      'Change background color of the panel if got warning / error + show the alias of the problematic metrics.',\n  },\n  {\n    label: 'String Threshold',\n    value: 'String Threshold',\n    description:\n      'Change background color of the panel if got warning / error + show the alias of the problematic metrics.',\n  },\n  {\n    label: 'Date Threshold',\n    value: 'Date Threshold',\n    description:\n      'Change background color of the panel if got warning / error + show the alias of the problematic metrics.',\n  },\n  {\n    label: 'Disable Criteria',\n    value: 'Disable Criteria',\n    description: 'Change background color of the panel to grey if disabled.',\n  },\n  {\n    label: 'Text Only',\n    value: 'Text Only',\n    description: 'Show the alias + the value on the panel without any condition.',\n  },\n];\n\nexport const StatusThresholdOptionsEditor: React.FC<FieldOverrideEditorProps<StatusThresholdOptions, any>> = ({\n  value,\n  onChange,\n}) => {\n  if (!value) {\n    value = { valueHandler: 'Number Threshold', crit: '90', warn: '70' };\n  }\n\n  let inputType;\n  if (value.valueHandler === 'Number Threshold') {\n    inputType = 'number';\n  } else if (value.valueHandler === 'String Threshold') {\n    inputType = 'text';\n  } else if (value.valueHandler === 'Date Threshold') {\n    inputType = 'datetime-local';\n  }\n\n  return (\n    <>\n      <Select\n        value={value.valueHandler}\n        options={valueHandlerOptions}\n        onChange={({ value: valueHandler }) => valueHandler && onChange({ ...value, valueHandler })}\n      ></Select>\n      {inputType && (\n        <>\n          <Label>Critical Value</Label>\n          <Input\n            value={value.crit}\n            type={inputType}\n            onChange={({ currentTarget: { value: crit } }) => onChange({ ...value, crit })}\n          ></Input>\n          <Label>Warning Value</Label>\n          <Input\n            value={value.warn}\n            type={inputType}\n            onChange={({ currentTarget: { value: warn } }) => onChange({ ...value, warn })}\n          ></Input>\n        </>\n      )}\n    </>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { StatusPanel } from './components/StatusPanel';\nimport { statusMigrationHandler } from 'lib/statusMigrationHandler';\nimport { statusPanelOptionsBuilder, StatusPanelOptions } from 'lib/statusPanelOptionsBuilder';\nimport { statusFieldOptionsBuilder, StatusFieldOptions } from 'lib/statusFieldOptionsBuilder';\n\nexport const plugin = new PanelPlugin<StatusPanelOptions, StatusFieldOptions>(StatusPanel)\n  .setMigrationHandler(statusMigrationHandler)\n  .setPanelOptions(statusPanelOptionsBuilder)\n  .useFieldConfig({ useCustomConfig: statusFieldOptionsBuilder });\n","import { PanelProps } from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport _ from 'lodash';\nimport React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport { ReactMarquee } from 'components/Marquee';\nimport { useHover, useInterval } from 'hooks/index';\nimport { StatusPanelOptions } from 'lib/statusPanelOptionsBuilder';\nimport { buildStatusMetricProps } from 'lib/buildStatusMetricProps';\nimport { MaybeAnchor } from './MaybeAnchor';\n\ntype StatusType = 'ok' | 'hide' | 'warn' | 'crit' | 'disable' | 'noData';\ntype Props = PanelProps<StatusPanelOptions>;\nexport const StatusPanel: React.FC<Props> = ({\n  data,\n  options,\n  fieldConfig,\n  width,\n  height,\n  replaceVariables,\n  timeZone,\n}) => {\n  // build styles\n  const statusColorClasses = {\n    ok: options.isIgnoreOKColors ? '' : css({ color: options.colors.ok }),\n    warn: css({ color: options.colors.warn }),\n    crit: css({ color: options.colors.crit }),\n    disable: css({ color: options.colors.disable }),\n    noData: css({ color: options.colors.disable }),\n    hide: css({ display: 'none' }),\n  };\n\n  // build props\n  let { annotations, disables, crits, warns, displays } = buildStatusMetricProps(\n    data,\n    fieldConfig,\n    options,\n    statusColorClasses,\n    replaceVariables,\n    timeZone\n  );\n\n  // clear other metrics when disabled and hide on disable\n  if (options.isHideAlertsOnDisable && disables.length > 0) {\n    crits = warns = displays = [];\n  }\n\n  // flatten and slice sections as needed\n  let alerts = [disables, crits, warns, displays].flat(1);\n  let extraMoreAlerts = null;\n  if (0 <= options.maxAlertNumber && options.maxAlertNumber < alerts.length) {\n    extraMoreAlerts = alerts.length - options.maxAlertNumber;\n    alerts = alerts.slice(0, options.maxAlertNumber);\n  }\n\n  // setup flipper\n  const [flipped, setFlipped] = React.useState(true);\n  const wrapper = React.useRef<HTMLDivElement>(null);\n  const isHover = useHover(wrapper);\n  useInterval(() => options.flipCard && !isHover && setFlipped(!flipped), 1000 * options.flipTime);\n\n  // set panel status and render\n  const panelStatus: StatusType = disables.length\n    ? 'disable'\n    : crits.length\n    ? 'crit'\n    : warns.length\n    ? 'warn'\n    : !data.series.length && options.isGrayOnNoData\n    ? 'noData'\n    : 'ok';\n\n\n\n  return (\n    <div\n      ref={wrapper}\n      className={css(\n        {\n          width,\n          height,\n          boxSizing: 'border-box',\n          borderRadius: options.cornerRadius,\n          overflow: 'hidden',\n          zIndex: 10,\n        },\n        !(panelStatus === 'ok' && options.isIgnoreOKColors) &&\n          options.colorMode === 'Panel' && { backgroundColor: (options.colors as any)[panelStatus === \"noData\" ? \"disable\": panelStatus] }\n      )}\n    >\n      <ReactCardFlip isFlipped={flipped}>\n        <div\n          className={css(\n            {\n              width,\n              height,\n              overflow: 'hidden',\n              position: 'relative',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              fontSize: '2rem',\n            },\n            options.colorMode === 'Metric' && statusColorClasses[panelStatus]\n          )}\n        >\n          <MaybeAnchor\n            href={options.clusterUrl}\n            target={options.clusterTargetBlank ? '_blank' : '_self'}\n            title={options.clusterName}\n          >\n            {panelStatus === 'crit'\n              ? 'Critical'\n              : panelStatus === 'disable'\n              ? 'Disabled'\n              : panelStatus === 'noData'\n              ? 'No Data'\n              : panelStatus === 'ok'\n              ? 'OK'\n              : 'Warn'}\n          </MaybeAnchor>\n        </div>\n        <div className={css({ height, display: 'flex', flexDirection: 'column' })}>\n          <div\n            className={css({\n              flex: '1 0 0',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n            })}\n          >\n            <div className={css({ minHeight: '1px', display: 'flex', justifyContent: 'center', fontSize: '1.5rem' })}>\n              <MaybeAnchor\n                href={options.clusterUrl}\n                target={options.clusterTargetBlank ? '_blank' : '_self'}\n                title={options.clusterName}\n              >\n                {replaceVariables(options.clusterName)}\n              </MaybeAnchor>\n            </div>\n          </div>\n          <div\n            className={css({\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              overflow: 'scroll',\n              flex: '0 1 auto',\n              '::-webkit-scrollbar': { background: 'transparent', width: '0px', display: 'none' },\n            })}\n          >\n            <ReactMarquee hover={isHover} autoScroll={options.isAutoScrollOnOverflow}>\n              <div>\n                {alerts.map(({ alias, link, className, displayValue }, index) => (\n                  <div key={index} className={className} style={{ color: 'inherit' }}>\n                    <MaybeAnchor href={link?.href} target={link?.target} title={alias} style={{ color: 'inherit' }}>\n                      {displayValue ? alias + ' - ' + displayValue : alias}\n                    </MaybeAnchor>\n                  </div>\n                ))}\n                {extraMoreAlerts && (\n                  <span className={css({ paddingTop: '2px', fontSize: '0.85rem' })}>+ {extraMoreAlerts} more</span>\n                )}\n              </div>\n            </ReactMarquee>\n          </div>\n          <div className={css({ fontSize: '1.5rem', minHeight: '1px', flex: '1 1 0' })}></div>\n          <div\n            className={css({\n              position: 'absolute',\n              height,\n              overflow: 'scroll',\n              padding: '1rem',\n              display: 'flex',\n              flexDirection: 'column',\n              '::-webkit-scrollbar': { background: 'transparent', width: '0px', display: 'none' },\n            })}\n          >\n            <ReactMarquee hover={isHover} autoScroll={options.isAutoScrollOnOverflow}>\n              <div className={css({ fontSize: '0.85rem' })}>\n                {annotations.map(({ alias, link, className, displayValue }, index) => (\n                  <div key={index} className={className} style={{ color: 'inherit' }}>\n                    <MaybeAnchor href={link?.href} target={link?.target} title={alias} style={{ color: 'inherit' }}>\n                      {displayValue ? alias + ' - ' + displayValue : alias}\n                    </MaybeAnchor>\n                  </div>\n                ))}\n              </div>\n            </ReactMarquee>\n          </div>\n        </div>\n      </ReactCardFlip>\n      {isHover && (\n        <IconButton\n          name={'exchange-alt'}\n          onClick={() => setFlipped(!flipped)}\n          className={css({ position: 'absolute', bottom: '2rem', right: '2rem' })}\n          aria-label='Flip Card'\n        ></IconButton>\n      )}\n    </div>\n  );\n};\n","import {\n  PanelData,\n  FieldConfigSource,\n  FieldConfig,\n  formattedValueToString,\n  toFixed,\n  dateTimeAsMoment,\n  InterpolateFunction,\n  LinkModel,\n  getValueFormat,\n  reduceField,\n} from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport _ from 'lodash';\n\nimport { StatusFieldOptions } from 'lib/statusFieldOptionsBuilder';\nimport { StatusPanelOptions } from 'lib/statusPanelOptionsBuilder';\n\ntype StatusType = 'ok' | 'hide' | 'warn' | 'crit' | 'disable' | 'noData';\ninterface StatusMetricProp extends Omit<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  alias: string;\n  displayValue?: string | number;\n  link?: LinkModel;\n}\n\nexport function buildStatusMetricProps(\n  data: PanelData,\n  fieldConfig: FieldConfigSource,\n  options: StatusPanelOptions,\n  colorClasses: { ok: string; warn: string; crit: string; disable: string; noData: string; hide: string },\n  replaceVariables: InterpolateFunction,\n  timeZone: string\n) {\n  let annotations: StatusMetricProp[] = [];\n  let displays: StatusMetricProp[] = [];\n  let crits: StatusMetricProp[] = [];\n  let warns: StatusMetricProp[] = [];\n  let disables: StatusMetricProp[] = [];\n  data.series.forEach((df) => {\n    // find first non-time column\n    const field = df.fields.find((field) => field.name.toLowerCase() !== 'time')!;\n    if (!field?.state) {\n      return;\n    }\n    const fieldCalcs = reduceField({ field: field!, reducers: ['bogus'] });\n\n    const config: FieldConfig<StatusFieldOptions> = _.defaultsDeep({ ...field.config }, fieldConfig.defaults);\n    if (!config.custom) {\n      return;\n    }\n\n    // if (!field.state?.calcs) {\n    //   return;\n    // }\n    // determine field status & handle formatting based on value handler\n    let fieldStatus: StatusType = config.custom.displayAliasType === 'Always' ? 'ok' : 'hide';\n    let displayValue = '';\n    switch (config.custom.thresholds.valueHandler) {\n      case 'Number Threshold':\n        let value: number = fieldCalcs[config.custom.aggregation];\n        const crit = +config.custom.thresholds.crit;\n        const warn = +config.custom.thresholds.warn;\n        if ((warn <= crit && crit <= value) || (warn >= crit && crit >= value)) {\n          fieldStatus = 'crit';\n        } else if ((warn <= value && value <= crit) || (warn >= value && value >= crit)) {\n          fieldStatus = 'warn';\n        }\n\n        if (!_.isFinite(value)) {\n          displayValue = 'Invalid Number';\n        } else if (config.unit) {\n          displayValue = formattedValueToString(getValueFormat(config.unit)(value, config.decimals));\n        } else {\n          displayValue = toFixed(value, config.decimals);\n        }\n        break;\n      case 'String Threshold':\n        displayValue = fieldCalcs[config.custom.aggregation];\n        if (displayValue === undefined || displayValue === null || displayValue !== displayValue) {\n          displayValue = 'Invalid String';\n        }\n\n        if (displayValue === config.custom.thresholds.crit) {\n          fieldStatus = 'crit';\n        } else if (displayValue === config.custom.thresholds.warn) {\n          fieldStatus = 'warn';\n        }\n        break;\n      case 'Date Threshold':\n        const val: string = fieldCalcs[config.custom.aggregation];\n        let date = dateTimeAsMoment(val);\n        if (timeZone === 'utc') {\n          date = date.utc();\n        }\n\n        displayValue = date.format(config.custom.dateFormat);\n\n        if (val === config.custom.thresholds.crit) {\n          fieldStatus = 'crit';\n        } else if (val === config.custom.thresholds.warn) {\n          fieldStatus = 'warn';\n        }\n        break;\n      case 'Disable Criteria':\n        if (fieldCalcs[config.custom.aggregation] === config.custom.disabledValue) {\n          fieldStatus = 'disable';\n        }\n        break;\n    }\n\n    // only display value when appropriate\n    const withAlias = config.custom.displayValueWithAlias;\n    const isDisplayValue =\n      withAlias === 'When Alias Displayed' ||\n      (fieldStatus === 'warn' && withAlias === 'Warning / Critical') ||\n      (fieldStatus === 'crit' && (withAlias === 'Warning / Critical' || withAlias === 'Critical Only'));\n\n    // apply RegEx if value will be displayed\n    if (isDisplayValue && config.custom.valueDisplayRegex) {\n      try {\n        displayValue = displayValue.replace(new RegExp(config.custom.valueDisplayRegex), '');\n      } catch {}\n    }\n\n    // get first link and interpolate variables\n    const link = ((field.getLinks && field.getLinks({})) ?? [])[0];\n    if (link) {\n      link.href = replaceVariables(link.href);\n    }\n\n    // build props and place in correct bucket\n    let props: StatusMetricProp = {\n      alias: config.displayName || df.name || df.refId || '',\n      displayValue: isDisplayValue ? displayValue : undefined,\n      link,\n    };\n\n    // set font format for field\n    if (fieldStatus !== 'ok') {\n      if (config.custom.fontFormat === 'Bold') {\n        props.className = css({ fontWeight: 'bold' });\n      } else if (config.custom.fontFormat === 'Italic') {\n        props.className = css({ fontStyle: 'italic' });\n      }\n    }\n    // set color for field when colormode is Metric\n    if (options.colorMode === 'Metric') {\n      props.className = cx(props.className, colorClasses[fieldStatus]);\n    }\n\n    // add to appropriate section\n    if (fieldStatus === 'ok') {\n      if (config.custom.displayType === 'Regular') {\n        displays.push(props);\n      } else {\n        annotations.push(props);\n      }\n    } else if (fieldStatus === 'warn') {\n      warns.push(props);\n    } else if (fieldStatus === 'crit') {\n      crits.push(props);\n    } else if (fieldStatus === 'disable') {\n      disables.push(props);\n    }\n  });\n\n  return { annotations, disables, crits, warns, displays };\n}\n","import { RefObject, useState } from 'react';\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport useEventListener from 'hooks/useEventListener';\n\nfunction useHover<T extends HTMLElement = HTMLElement>(elementRef: RefObject<T>): boolean {\n  const [value, setValue] = useState<boolean>(false);\n\n  const handleMouseEnter = () => setValue(true);\n  const handleMouseLeave = () => setValue(false);\n\n  useEventListener('mouseenter', handleMouseEnter, elementRef);\n  useEventListener('mouseleave', handleMouseLeave, elementRef);\n\n  return value;\n}\n\nexport default useHover;\n","import { DataLink, PanelMigrationHandler, PanelModel } from '@grafana/data';\nimport { StatusPanelOptions } from './statusPanelOptionsBuilder';\nimport { StatusThresholdOptions } from 'components/StatusThresholdOptionsEditor';\nimport { StatusFieldOptions } from './statusFieldOptionsBuilder';\n\ninterface AngularPanelModel extends Omit<PanelModel, 'targets'> {\n  clusterName: string;\n  namePrefix: string;\n  maxAlertNumber: number;\n  cornerRadius: number;\n  flipCard: boolean;\n  flipTime: number;\n  colorMode: 'Panel' | 'Metric' | 'Disabled';\n  colors: { crit: string; warn: string; ok: string; disable: string };\n  isAutoScrollOnOverflow: boolean;\n  isGrayOnNoData: boolean;\n  isIgnoreOKColors: boolean;\n  isHideAlertsOnDisable: boolean;\n  links: DataLink[];\n  targets?: [\n    {\n      aggregation?: Pick<StatusFieldOptions, 'aggregation'>;\n      alias?: string;\n      crit?: number;\n      decimals?: number;\n      displayType?: Pick<StatusFieldOptions, 'displayType'>;\n      displayAliasType?: Pick<StatusFieldOptions, 'displayAliasType'>;\n      displayValueWithAlias?: Pick<StatusFieldOptions, 'displayValueWithAlias'>;\n      units?: string;\n      warn?: number;\n      valueHandler?: Pick<StatusThresholdOptions, 'valueHandler'>;\n      url?: string;\n      refId?: string;\n    }\n  ];\n}\n\nconst isAngularModel = (panel: Omit<PanelModel, 'targets'>): panel is AngularPanelModel =>\n  !!panel.options && 'clusterName' in panel;\n\nconst migrateFieldConfig = (panel: AngularPanelModel) => {\n  const fieldConfig = {\n    defaults: {},\n    overrides: [] as any[],\n  };\n\n  if (!panel.targets) {\n    return fieldConfig;\n  }\n\n  for (const target of panel.targets) {\n    if (target.refId) {\n      const fieldConfigOverride = {\n        matcher: {\n          id: 'byFrameRefID',\n          options: target.refId,\n        },\n        properties: [] as any[],\n      };\n\n      if (target.aggregation) {\n        fieldConfigOverride.properties.push({\n          id: 'custom.aggregation',\n          value: target.aggregation,\n        });\n      }\n\n      if (target.crit || target.warn || target.valueHandler) {\n        fieldConfigOverride.properties.push({\n          id: 'custom.thresholds',\n          value: {\n            valueHandler: target.valueHandler,\n            crit: target.crit,\n            warn: target.warn,\n          },\n        });\n      }\n\n      if (target.displayType) {\n        fieldConfigOverride.properties.push({\n          id: 'custom.displayType',\n          value: target.displayType,\n        });\n      }\n\n      if (target.displayAliasType) {\n        fieldConfigOverride.properties.push({\n          id: 'custom.displayAliasType',\n          value: target.displayAliasType,\n        });\n      }\n\n      if (target.displayValueWithAlias) {\n        fieldConfigOverride.properties.push({\n          id: 'custom.displayValueWithAlias',\n          value: target.displayValueWithAlias,\n        });\n      }\n\n      if (target.decimals) {\n        fieldConfigOverride.properties.push({\n          id: 'decimals',\n          value: target.decimals,\n        });\n      }\n\n      if (target.units) {\n        fieldConfigOverride.properties.push({\n          id: 'unit',\n          value: target.units,\n        });\n      }\n\n      fieldConfig.overrides.push(fieldConfigOverride);\n    }\n  }\n\n  return fieldConfig;\n};\n\nexport const statusMigrationHandler: PanelMigrationHandler<StatusPanelOptions> = (panel) => {\n  if (isAngularModel(panel)) {\n    // DataLink cannot be null, create an empty one\n    let clusterLink: DataLink<any> = {\n      url: '',\n      title: '',\n    };\n    if (panel.links && panel.links.length > 0) {\n      clusterLink = panel.links[0];\n    }\n    const options: StatusPanelOptions = {\n      clusterName: panel.clusterName,\n      clusterUrl: clusterLink?.url,\n      clusterTargetBlank: !!clusterLink?.targetBlank,\n      // namePrefix: panel.namePrefix,\n      maxAlertNumber: panel?.maxAlertNumber,\n      cornerRadius: `${panel.cornerRadius}%`,\n      flipCard: panel.flipCard,\n      flipTime: panel.flipTime,\n      colorMode: panel.colorMode,\n      colors: panel.colors,\n      isAutoScrollOnOverflow: panel.isAutoScrollOnOverflow,\n      isGrayOnNoData: panel.isGrayOnNoData,\n      isIgnoreOKColors: panel.isIgnoreOKColors,\n      isHideAlertsOnDisable: panel.isHideAlertsOnDisable,\n    };\n\n    // migrate overwrites\n    panel.fieldConfig = migrateFieldConfig(panel);\n\n    // remove old angular settings from panel json\n    cleanupPanel(panel);\n    return options;\n  }\n  return panel.options;\n};\n\nconst cleanupPanel = (panel: AngularPanelModel) => {\n  // @ts-ignore\n  delete panel.clusterName;\n  // @ts-ignore\n  delete panel.colorMode;\n  // @ts-ignore\n  delete panel.colors;\n  // @ts-ignore\n  delete panel.cornerRadius;\n  // @ts-ignore\n  delete panel.flipCard;\n  // @ts-ignore\n  delete panel.flipTime;\n  // @ts-ignore\n  delete panel.fontFormat;\n  // @ts-ignore\n  delete panel.isAutoScrollOnOverflow;\n  // @ts-ignore\n  delete panel.isGrayOnNoData;\n  // @ts-ignore\n  delete panel.isHideAlertsOnDisable;\n  // @ts-ignore\n  delete panel.isIgnoreOKColors;\n  // @ts-ignore\n  delete panel.maxAlertNumber;\n  // @ts-ignore\n  delete panel.namePrefix;\n\n  if (panel.targets) {\n    for (const target of panel.targets) {\n      // @ts-ignore\n      delete target['$$hashKey'];\n    }\n  }\n};\n","import { PanelOptionsEditorBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { StatusColorOptionsEditor } from 'components/StatusColorOptionsEditor';\n\nexport interface StatusPanelOptions {\n  clusterName: string;\n  clusterUrl: string;\n  clusterTargetBlank: boolean;\n  // namePrefix: string;\n  maxAlertNumber: number;\n  cornerRadius: string;\n  flipCard: boolean;\n  flipTime: number;\n  colorMode: 'Panel' | 'Metric' | 'Disabled';\n  colors: { crit: string; warn: string; ok: string; disable: string };\n  isAutoScrollOnOverflow: boolean;\n  isGrayOnNoData: boolean;\n  isIgnoreOKColors: boolean;\n  isHideAlertsOnDisable: boolean;\n}\n\nexport const statusPanelOptionsBuilder = (builder: PanelOptionsEditorBuilder<StatusPanelOptions>) =>\n  builder\n    .addTextInput({\n      path: 'clusterName',\n      name: 'Cluster Name',\n      description: '',\n      defaultValue: '',\n      category: ['Status Panel options'],\n      settings: { expandTemplateVars: true },\n    })\n    .addTextInput({\n      path: 'clusterUrl',\n      name: 'Cluster URL',\n      description: '',\n      defaultValue: '',\n      category: ['Status Panel options'],\n      settings: { expandTemplateVars: true },\n    })\n    .addBooleanSwitch({\n      path: 'clusterTargetBlank',\n      name: 'Open Cluster URL in new tab',\n      defaultValue: false,\n      category: ['Status Panel options'],\n      showIf: ({ clusterUrl }) => !!clusterUrl,\n    })\n    // .addTextInput({\n    //   path: 'namePrefix',\n    //   name: 'Remove Prefix',\n    //   defaultValue: '',\n    //   description: 'A prefix to remove from the name (helpful when repeating panel over a template)',\n    //   category: ['Status Panel Options'],\n    // })\n    .addNumberInput({\n      path: 'maxAlertNumber',\n      name: 'Max Alerts',\n      defaultValue: -1,\n      description: 'Max alerts number to show in the panel. In case value is less than zero, show all alerts',\n      category: ['Status Panel options'],\n    })\n    .addTextInput({\n      path: 'cornerRadius',\n      name: 'Corner Radius',\n      defaultValue: '0rem',\n      description: 'The corner radius to apply the panel. Values are used for the border-radius CSS attribute.',\n      category: ['Status Panel options'],\n    })\n    .addBooleanSwitch({ path: 'flipCard', name: 'Flip Panel', defaultValue: false, category: ['Status Panel options'] })\n    .addNumberInput({\n      path: 'flipTime',\n      name: 'Flip interval',\n      defaultValue: 5,\n      category: ['Status Panel options'],\n      showIf: ({ flipCard }) => flipCard,\n    })\n    .addSelect({\n      path: 'colorMode',\n      name: 'Coloring Mode',\n      description: '',\n      defaultValue: 'Panel',\n      settings: {\n        options: [\n          { label: 'Panel', value: 'Panel', description: 'Apply color to the panel background' },\n          { label: 'Metric', value: 'Metric', description: 'Apply color to the metric text' },\n          { label: 'Disabled', value: 'Disabled', description: 'Do not apply any coloring' },\n        ],\n      },\n      category: ['Status Panel threshold options'],\n    })\n    // Default colors match Table Panel so colorized text is easier to read\n    .addCustomEditor({\n      id: 'colors',\n      path: 'colors',\n      name: 'Colors',\n      editor: StatusColorOptionsEditor,\n      category: ['Status Panel threshold options'],\n      defaultValue: {\n        crit: config.theme2.visualization.getColorByName('red'),\n        warn: config.theme2.visualization.getColorByName('orange'),\n        ok: config.theme2.visualization.getColorByName('green'),\n        disable: config.theme2.visualization.getColorByName('gray'),\n      },\n    })\n    .addBooleanSwitch({\n      path: 'isAutoScrollOnOverflow',\n      name: 'Auto scroll alerts on overflow',\n      defaultValue: false,\n      category: ['Status Panel options'],\n    })\n    .addBooleanSwitch({\n      path: 'isGrayOnNoData',\n      name: \"Use 'Disable' color if no data\",\n      defaultValue: false,\n      category: ['Status Panel options'],\n    })\n    .addBooleanSwitch({\n      path: 'isIgnoreOKColors',\n      name: 'Ignore color in OK state',\n      defaultValue: false,\n      category: ['Status Panel options'],\n    })\n    .addBooleanSwitch({\n      path: 'isHideAlertsOnDisable',\n      name: 'Hide alerts in Disabled state',\n      defaultValue: false,\n      category: ['Status Panel options'],\n    });\n","import { FieldConfigEditorBuilder } from '@grafana/data';\nimport { StatusThresholdOptionsEditor, StatusThresholdOptions } from 'components/StatusThresholdOptionsEditor';\n\nexport interface StatusFieldOptions {\n  aggregation:\n    | 'sum'\n    | 'max'\n    | 'min'\n    | 'logmin'\n    | 'mean'\n    | 'last'\n    | 'first'\n    | 'lastNotNull'\n    | 'firstNotNull'\n    | 'count'\n    | 'nonNullCount'\n    | 'allIsNull'\n    | 'allIsZero'\n    | 'range'\n    | 'diff'\n    | 'delta'\n    | 'step'\n    | 'previousDeltaUp';\n  valueDisplayRegex: string;\n  thresholds: StatusThresholdOptions;\n  displayType: 'Regular' | 'Annotation';\n  fontFormat: 'Regular' | 'Bold' | 'Italic';\n  dateFormat: string;\n  displayAliasType: 'Warning / Critical' | 'Always';\n  displayValueWithAlias: 'Never' | 'When Alias Displayed' | 'Warning / Critical' | 'Critical Only';\n  disabledValue: string;\n}\n\nexport const statusFieldOptionsBuilder = (builder: FieldConfigEditorBuilder<StatusFieldOptions>) =>\n  builder\n    .addSelect({\n      path: 'aggregation',\n      name: 'Aggregation',\n      description: 'What to do if the query returns multiple data points.',\n      defaultValue: 'last',\n      settings: {\n        options: [\n          { label: 'Last', value: 'last' },\n          { label: 'First', value: 'first' },\n          { label: 'Max', value: 'max' },\n          { label: 'Min', value: 'min' },\n          { label: 'Sum', value: 'sum' },\n          { label: 'Avg', value: 'mean' },\n          { label: 'Delta', value: 'delta' },\n        ],\n      },\n      category: ['Status Panel display options'],\n    })\n    .addTextInput({\n      path: 'valueDisplayRegex',\n      name: 'Value Regex',\n      description:\n        \"A regex which will decide the part of the value to be displayed. In case the regex is empty or it doesn't match any part of the metrics value, all the metric value will be displayed.\",\n      defaultValue: '',\n      settings: {},\n      category: ['Status Panel display options'],\n    })\n    .addSelect({\n      path: 'fontFormat',\n      name: 'Font Format',\n      description: 'The metric text font format in disable, warning or critical state',\n      defaultValue: 'Regular',\n      settings: {\n        options: [\n          { label: 'Regular', value: 'Regular' },\n          { label: 'Bold', value: 'Bold' },\n          { label: 'Italic', value: 'Italic' },\n        ],\n      },\n      category: ['Status Panel display options'],\n    })\n    .addCustomEditor({\n      path: 'thresholds',\n      id: 'thresholds',\n      name: 'Threshold Type',\n      defaultValue: { valueHandler: 'Number Threshold', warn: 70, crit: 90 },\n      description: 'The type of data to show to the panel.',\n      editor: StatusThresholdOptionsEditor,\n      override: StatusThresholdOptionsEditor,\n      category: ['Status Panel threshold options'],\n      process: x => x,\n      shouldApply: () => true,\n    })\n    .addSelect({\n      path: 'displayType',\n      name: 'Display Position',\n      description: 'The location the value will be displayed',\n      defaultValue: 'Regular',\n      settings: {\n        options: [\n          {\n            label: 'Regular',\n            value: 'Regular',\n            description: 'The alias + the value will be display in the center, under the panel title',\n          },\n          {\n            label: 'Annotation',\n            value: 'Annotation',\n            description:\n              'The alias + the value will be displayed on top left. If the value answers a threshold condition, it will displayed as regular state',\n          },\n        ],\n      },\n      category: ['Status Panel display options'],\n      showIf: ({ thresholds }) => thresholds.valueHandler !== 'Disable Criteria',\n    })\n    .addTextInput({\n      path: 'dateFormat',\n      name: 'Date Format',\n      defaultValue: 'YYYY-MM-DD HH:mm:ss',\n      description: 'Specify the Date/Time format (Use \"lll\" for local date/time format)',\n      category: ['Status Panel display options'],\n      showIf: ({ thresholds }) => thresholds.valueHandler === 'Date Threshold',\n    })\n    .addSelect({\n      path: 'displayAliasType',\n      name: 'Display Alias',\n      description: 'When to display the alias',\n      defaultValue: 'Warning / Critical',\n      settings: {\n        options: [\n          {\n            label: 'Warning / Critical',\n            value: 'Warning / Critical',\n            description: 'The alias will be displayed in warning or critical state',\n          },\n          {\n            label: 'Always',\n            value: 'Always',\n            description: 'The alias will always be displayed, regardless critical and warning state',\n          },\n        ],\n      },\n      category: ['Status Panel display options'],\n      showIf: ({ thresholds }) => thresholds.valueHandler.slice(-9) === 'Threshold',\n    })\n    .addSelect({\n      path: 'displayValueWithAlias',\n      name: 'Display Value',\n      description: 'When to display the value along with the alias',\n      defaultValue: 'When Alias Displayed',\n      settings: {\n        options: [\n          { label: 'Never', value: 'Never', description: 'The value will never be displayed' },\n          {\n            label: 'When Alias Displayed',\n            value: 'When Alias Displayed',\n            description: 'The value will be displayed always when alias is displayed',\n          },\n          {\n            label: 'Warning / Critical',\n            value: 'Warning / Critical',\n            description: 'The value will be displayed in warning or critical state',\n          },\n          {\n            label: 'Critical Only',\n            value: 'Critical Only',\n            description: 'The value will be displayed in critical only',\n          },\n        ],\n      },\n      category: ['Status Panel display options'],\n      showIf: ({ thresholds }) => thresholds.valueHandler.slice(-9) === 'Threshold',\n    })\n    .addTextInput({\n      path: 'disabledValue',\n      name: 'Disable Criteria',\n      description: 'The exact value which will make this panel to be displayed as disabled',\n      category: ['Status Panel threshold options'],\n      showIf: ({ thresholds }) => thresholds.valueHandler === 'Disable Criteria',\n    });\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","exports","React","react_1","props","_a","cardStyles","back","front","cardZIndex","containerStyle","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","infinite","isFlipped","_b","containerClassName","_c","useState","isFlippedState","setFlipped","_d","rotation","setRotation","useEffect","c","getContainerClassName","useMemo","className","concat","getComponent","key","children","Error","frontRotateY","backRotateY","frontRotateX","backRotateX","styles","WebkitBackfaceVisibility","backfaceVisibility","height","left","position","top","transform","transformStyle","transition","width","container","perspective","zIndex","flipper","createElement","style","module","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","d","a","definition","obj","prop","r","Symbol","toStringTag","eventName","handler","element","options","savedHandler","useRef","useLayoutEffect","current","targetElement","window","addEventListener","eventListener","event","removeEventListener","callback","delay","savedCallback","id","setInterval","clearInterval","ReactMarquee","autoScroll","hover","div","y","setY","dy","setDy","useInterval","parentElement","scrollTop","scrollHeight","offsetHeight","scrollTo","ref","MaybeAnchor","href","StatusColorOptionsEditor","onChange","theme","useTheme2","buildHandler","color","HorizontalGroup","spacing","Label","ColorPicker","crit","visualization","getColorByName","warn","ok","disable","valueHandlerOptions","label","description","StatusThresholdOptionsEditor","inputType","valueHandler","Select","Input","type","currentTarget","plugin","PanelPlugin","data","fieldConfig","replaceVariables","timeZone","statusColorClasses","isIgnoreOKColors","css","colors","noData","hide","display","annotations","disables","crits","warns","displays","colorClasses","series","forEach","df","field","fields","find","name","toLowerCase","state","fieldCalcs","reduceField","reducers","config","_","defaults","custom","fieldStatus","displayAliasType","displayValue","thresholds","aggregation","unit","formattedValueToString","getValueFormat","decimals","toFixed","val","date","dateTimeAsMoment","utc","format","dateFormat","disabledValue","withAlias","displayValueWithAlias","isDisplayValue","valueDisplayRegex","replace","RegExp","link","getLinks","alias","displayName","refId","fontFormat","fontWeight","fontStyle","colorMode","cx","displayType","push","buildStatusMetricProps","isHideAlertsOnDisable","alerts","flat","extraMoreAlerts","maxAlertNumber","slice","flipped","wrapper","isHover","elementRef","setValue","useEventListener","useHover","flipCard","flipTime","panelStatus","isGrayOnNoData","boxSizing","borderRadius","cornerRadius","overflow","backgroundColor","ReactCardFlip","flexDirection","justifyContent","alignItems","fontSize","clusterUrl","target","clusterTargetBlank","title","clusterName","flex","minHeight","background","isAutoScrollOnOverflow","map","index","span","paddingTop","padding","IconButton","onClick","bottom","right","aria-label","setMigrationHandler","panel","isAngularModel","clusterLink","url","links","targetBlank","overrides","targets","fieldConfigOverride","matcher","properties","units","migrateFieldConfig","namePrefix","cleanupPanel","setPanelOptions","builder","addTextInput","path","defaultValue","category","settings","expandTemplateVars","addBooleanSwitch","showIf","addNumberInput","addSelect","addCustomEditor","editor","theme2","useFieldConfig","useCustomConfig","override","process","x","shouldApply"],"sourceRoot":""}